--Escribir una función que sume dos números enteros.
sumar:: Int -> Int -> Int
sumar x y = x + y

--Implementar una función que calcule el área de un círculo dado su radio.
areaCirculo:: Double -> Double
areaCirculo r = r * r * 3.14139

--Definir una función que determine si un número es par o impar.
parOImpar:: Int -> Bool
parOImpar x = if x `mod` 2 == 0 then True else False

--Escribir una función que calcule el factorial de un número.
factorial:: Int -> Int
factorial 0 = 1
factorial x = x*factorial(x-1)

--Implementar una función que invierta una lista.
invertirLista [] = []
invertirLista(x:xs) = (invertirLista xs)++[x]

--Definir una función que determine si una lista está ordenada de forma ascendente.
ordAscend :: (Ord a) => [a] -> Bool
ordAscend [] = True
ordAscend [_] = True
ordAscend (x:y:xs) = x <= y && ordAscend (y:xs)

--Escribir una función que cuente la cantidad de elementos en una lista.
cantElems [] = 0
cantElems (x:xs) = cantElems xs + 1

--Implementar una función que obtenga los elementos en posiciones pares de una lista.
posPares :: [a] -> [a]
posPares xs = aux 0 xs
  where
    aux _ [] = []
    aux i (y:ys)
      | even i    = y : aux (i + 1) ys
      | otherwise =     aux (i + 1) ys

--Definir una función que calcule el máximo común divisor de dos números.
mcd :: Int -> Int -> Int
mcd x 0 = x
mcd x y = mcd y (x `mod` y)

--Implementar una función que calcule la suma de los dígitos de un número entero.
sumaDigitos 0 = 0
sumaDigitos x = (x `mod` 10) + sumaDigitos (x `div` 10) --mod para resto, div para numero

--Definir una función que encuentre el elemento mínimo en una lista.
minimo :: (Ord a) => [a] -> a
minimo []     = error "Lista vacía"
minimo [x]    = x
minimo (x:xs) = min x (minimo xs)

--Escribir una función que obtenga el enésimo número de la secuencia de Fibonacci.
fibonacci 0 = 0
fibonacci 1 = 1
fibonacci x = fibonacci (x-1) + fibonacci (x-2) 

--Definir una función que elimine los duplicados de una lista.
eliminarDuplicados :: (Eq a) => [a] -> [a]
eliminarDuplicados [] = []
eliminarDuplicados (x:xs)
  | x `elem` xs = eliminarDuplicados xs     -- x ya está después, lo salteo
  | otherwise   = x : eliminarDuplicados xs -- x no está más, lo conservo
  
--Implementar una función que obtenga el producto de todos los elementos de una lista.
productoLista [] = 1
productoLista (x:xs) = x*productoLista xs
main = print(productoLista [1,4,1,5])

